# Aliases
docker-defaults: &docker-defaults
  docker:
    - image: nyulibraries/circleci_docker:18.06.1-ce-git-compose-1.22.0
  working_directory: ~/app

auth_docker: &auth_docker
  run:
    name: Authenticate Docker
    command: |
      docker login -u "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"

pull: &pull
  run:
    name: Pull docker images
    command: ./scripts/pull_docker.sh

push: &push
  run:
    name: Push docker images
    command: ./scripts/push_docker.sh

build: &build
  run:
    name: Build images
    command: docker-compose build

test: &test
  run:
    name: Test
    command: docker-compose run test

set-stage-dev: &set-stage-dev
  run:
    name: Set stage to "dev"
    command: echo 'export STAGE=dev' >> $BASH_ENV

set-stage-prod: &set-stage-prod
  run:
    name: Set stage to "prod"
    command: echo 'export STAGE=prod' >> $BASH_ENV

awsdev-deploy: &awsdev-deploy
  run:
    name: Deploy via serverless to development account
    command: |
      if [ $DISABLE_AWSDEV != true ]
      then
        REST_API_ID=$REST_API_ID_DEV \
        REST_API_NAMESPACE_RESOURCE_ID=$REST_API_NAMESPACE_RESOURCE_ID_DEV \
        REST_API_ROOT_RESOURCE_ID=$REST_API_ROOT_RESOURCE_ID_DEV \
        docker-compose run deploy yarn serverless deploy --stage=$STAGE --region=$REGION
      else
        echo "Deployment to AWS development account has been disabled with the current environment configuration (DISABLE_AWSDEV == true)"
      fi

awsprod-deploy: &awsprod-deploy
  run:
    name: Deploy via serverless to production account
    command: |
      if [ $DISABLE_AWSPROD != true ]
      then
        REST_API_ID=$REST_API_ID_PROD \
        REST_API_NAMESPACE_RESOURCE_ID=$REST_API_NAMESPACE_RESOURCE_ID_PROD \
        REST_API_ROOT_RESOURCE_ID=$REST_API_ROOT_RESOURCE_ID_PROD \
        docker-compose run deploy yarn serverless deploy --stage=$STAGE --region=$REGION
      else
        echo "Deployment to AWS production account has been disabled with the current environment configuration (DISABLE_AWSPROD == true)"
      fi

version: 2
jobs:
  deploy-staging-awsdev:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-stage-dev
      - <<: *awsdev-deploy

  deploy-staging-awsprod:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-stage-dev
      - <<: *awsprod-deploy

  deploy-production-awsdev:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-stage-prod
      - <<: *awsdev-deploy

  deploy-production-awsprod:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-stage-prod
      - <<: *awsprod-deploy

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - deploy-staging-awsdev:
          context: web-lambdas-aws-nyulitsdev
          filters:
            branches:
              ignore: master
      - deploy-staging-awsprod:
          context: web-lambdas-aws-nyulits
          filters:
            branches:
              ignore: master
      - deploy-production-awsdev:
          context: web-lambdas-aws-nyulitsdev
          filters:
            branches:
              only: master
      - deploy-production-awsprod:
          context: web-lambdas-aws-nyulits
          filters:
            branches:
              only: master
